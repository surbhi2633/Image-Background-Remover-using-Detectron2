# -*- coding: utf-8 -*-
"""pan_seg2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HP_YewGKE-VOTpAv4M8-0RRpwSMA-mbY
"""

# Commented out IPython magic to ensure Python compatibility.
#downloading and unziping the coco dataset
!mkdir COCO
# %cd COCO
!mkdir images
# %cd images

!wget http://images.cocodataset.org/zips/train2017.zip
!unzip train2017.zip
!rm train2017.zip

!wget http://images.cocodataset.org/zips/val2017.zip
!unzip val2017.zip
!rm val2017.zip

# %cd ..
!wget http://images.cocodataset.org/annotations/annotations_trainval2017.zip
!unzip annotations_trainval2017.zip
!rm annotations_trainval2017.zip

!wget http://images.cocodataset.org/annotations/stuff_annotations_trainval2017.zip
!unzip stuff_annotations_trainval2017.zip
!rm stuff_annotations_trainval2017.zip

# install dependencies: (use cu101 because colab has CUDA 10.1)
!pip install -U torch==1.5 torchvision==0.6 -f https://download.pytorch.org/whl/cu101/torch_stable.html 
!pip install cython pyyaml==5.1
!pip install -U 'git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI'
import torch, torchvision
print(torch.__version__, torch.cuda.is_available())
!gcc --version
# opencv is pre-installed on colab
# install detectron2:
!pip install detectron2==0.1.3 -f https://dl.fbaipublicfiles.com/detectron2/wheels/cu101/torch1.5/index.html

from detectron2.utils.collect_env import collect_env_info
print(collect_env_info())

#You may need to restart your runtime prior to this, to let your installation take effect
# Some basic setup:
# Setup detectron2 logger
import detectron2
from detectron2.utils.logger import setup_logger
setup_logger()

# import some common libraries
import numpy as np
import cv2
import random
import math 
import os
from google.colab.patches import cv2_imshow
from PIL import Image

# import some common detectron2 utilities
from detectron2 import model_zoo
from detectron2.engine import DefaultTrainer
from detectron2.engine import DefaultPredictor
from detectron2.config import get_cfg
from detectron2.utils.visualizer import Visualizer
from detectron2.utils.serialize import PicklableWrapper
from detectron2.data import MetadataCatalog

from detectron2.data.datasets import register_coco_instances
register_coco_instances("train", {}, "/content/COCO/annotations/instances_train2017.json", "/content/COCO/images/train2017")
register_coco_instances("val", {}, "/content/COCO/annotations/instances_val2017.json", "/content/COCO/images/val2017")

cfg = get_cfg()
cfg.merge_from_file(model_zoo.get_config_file("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml"))
cfg.DATASETS.TRAIN = ("train",)
cfg.DATASETS.TEST = ()
cfg.DATALOADER.NUM_WORKERS = 2
cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url("COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml")  
cfg.SOLVER.IMS_PER_BATCH = 8
cfg.SOLVER.BASE_LR = 0.0003  
cfg.SOLVER.MAX_ITER = 300   
cfg.MODEL.ROI_HEADS.BATCH_SIZE_PER_IMAGE = 128   
cfg.MODEL.ROI_HEADS.NUM_CLASSES = 80

os.makedirs(cfg.OUTPUT_DIR, exist_ok=True)
trainer = DefaultTrainer(cfg) 
trainer.resume_or_load(resume=False)
trainer.train()

# Commented out IPython magic to ensure Python compatibility.
# Look at training curves in tensorboard:
# %reload_ext tensorboard
# %tensorboard --logdir output

!wget https://miro.medium.com/max/2560/1*gBQxShAkxBp_YPb14CN0Nw.jpeg -O input.jpg
im = cv2.imread("./input.jpg")

# load weights
cfg.MODEL.WEIGHTS = os.path.join(cfg.OUTPUT_DIR, "model_final.pth")
cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.7   # set the testing threshold for this model
# Set training data-set path
cfg.DATASETS.TEST = ("val", )
# Create predictor (model for inference)
predictor = DefaultPredictor(cfg)
outputs = predictor(im)
mask = outputs["instances"].pred_masks
i = len(mask[0][0])
j = len(mask[0])
test = im
for j1 in range(j):
  for i1 in range(i):
    if(outputs["instances"].pred_masks[0][j1][i1] == False):
      test[j1,i1] = 230
cv2_imshow(test)

#import the COCO Evaluator to use the COCO Metrics
from detectron2.evaluation import COCOEvaluator, inference_on_dataset
from detectron2.data import build_detection_test_loader

#Call the COCO Evaluator function and pass the Validation Dataset
evaluator = COCOEvaluator("val", cfg, False, output_dir="/output/")
val_loader = build_detection_test_loader(cfg, "val")

#Use the created predicted model in the previous step
inference_on_dataset(predictor.model, val_loader, evaluator)

